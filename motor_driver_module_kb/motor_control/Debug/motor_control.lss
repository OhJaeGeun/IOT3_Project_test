
motor_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a16  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000785  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000452  00000000  00000000  0000148f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  00001de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001e85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setPwm>:
{
	//TCCR1A |= (1 << WGM11) | (1 << WGM10);
	//TCCR1A |= (1 << COM1A1);
	//TCCR1B |= (1 << CS12);
	
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
  80:	e0 eb       	ldi	r30, 0xB0	; 176
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	83 60       	ori	r24, 0x03	; 3
  88:	80 83       	st	Z, r24
	//TCCR2A |= (1 << WGM22) | (1 << WGM21) | (1 << WGM20);
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1);
  8a:	80 81       	ld	r24, Z
  8c:	80 6a       	ori	r24, 0xA0	; 160
  8e:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);
  90:	e1 eb       	ldi	r30, 0xB1	; 177
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	84 60       	ori	r24, 0x04	; 4
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <port_init>:
}

void port_init()
{
	PORTB = 0x00;
  9c:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
  9e:	1b b8       	out	0x0b, r1	; 11
  a0:	08 95       	ret

000000a2 <setPort>:
}
void setPort(char motor_left_pb, char motor_right_pd)
{
	PORTB = motor_left_pb; // motor_right_pb | motor_left_pb;
  a2:	85 b9       	out	0x05, r24	; 5
	PORTD = motor_right_pd;
  a4:	6b b9       	out	0x0b, r22	; 11
  a6:	08 95       	ret

000000a8 <setSpeed>:
}
void setSpeed(int left_wheel, int right_wheel)
{
	OCR2A = left_wheel; // left
  a8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = right_wheel; // right
  ac:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  b0:	08 95       	ret

000000b2 <main>:

int main(void)
{
	int data;
	
	DDRB = 0xFF; // 0011 1000
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x1C; // 0001 1100
  b6:	8c e1       	ldi	r24, 0x1C	; 28
  b8:	8a b9       	out	0x0a, r24	; 10
	
	setPwm();
  ba:	0e 94 40 00 	call	0x80	; 0x80 <setPwm>
	port_init();
  be:	0e 94 4e 00 	call	0x9c	; 0x9c <port_init>
	UART_1_init(); // UART1 초기화
  c2:	0e 94 be 00 	call	0x17c	; 0x17c <UART_1_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	80 e7       	ldi	r24, 0x70	; 112
  ca:	92 e0       	ldi	r25, 0x02	; 2
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x24>
  d6:	00 00       	nop
	while(1)
	{
		//setPort(0x00, 0x00);
		_delay_ms(50);
		
		setSpeed(0, 0);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 54 00 	call	0xa8	; 0xa8 <setSpeed>
		
		port_init();
  e4:	0e 94 4e 00 	call	0x9c	; 0x9c <port_init>
		
		data = UART1_receive();
  e8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <UART1_receive>
  ec:	90 e0       	ldi	r25, 0x00	; 0
		
		if(data == 'A'){ // up
  ee:	81 34       	cpi	r24, 0x41	; 65
  f0:	91 05       	cpc	r25, r1
  f2:	59 f4       	brne	.+22     	; 0x10a <main+0x58>
			setSpeed(110, 110);
  f4:	6e e6       	ldi	r22, 0x6E	; 110
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	8e e6       	ldi	r24, 0x6E	; 110
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 54 00 	call	0xa8	; 0xa8 <setSpeed>
			setPort(0x28, 0x18);
 100:	68 e1       	ldi	r22, 0x18	; 24
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	0e 94 51 00 	call	0xa2	; 0xa2 <setPort>
 108:	de cf       	rjmp	.-68     	; 0xc6 <main+0x14>
		}
		else if(data == 'B'){ // down
 10a:	82 34       	cpi	r24, 0x42	; 66
 10c:	91 05       	cpc	r25, r1
 10e:	59 f4       	brne	.+22     	; 0x126 <main+0x74>
			setSpeed(120, 120);
 110:	68 e7       	ldi	r22, 0x78	; 120
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	88 e7       	ldi	r24, 0x78	; 120
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 54 00 	call	0xa8	; 0xa8 <setSpeed>
			setPort(0x18, 0x0C);
 11c:	6c e0       	ldi	r22, 0x0C	; 12
 11e:	88 e1       	ldi	r24, 0x18	; 24
 120:	0e 94 51 00 	call	0xa2	; 0xa2 <setPort>
 124:	d0 cf       	rjmp	.-96     	; 0xc6 <main+0x14>
		}
		else if(data == 'C'){ // left
 126:	83 34       	cpi	r24, 0x43	; 67
 128:	91 05       	cpc	r25, r1
 12a:	59 f4       	brne	.+22     	; 0x142 <main+0x90>
			setSpeed(175, 175);
 12c:	6f ea       	ldi	r22, 0xAF	; 175
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	8f ea       	ldi	r24, 0xAF	; 175
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 54 00 	call	0xa8	; 0xa8 <setSpeed>
			setPort(0x28, 0x0C);
 138:	6c e0       	ldi	r22, 0x0C	; 12
 13a:	88 e2       	ldi	r24, 0x28	; 40
 13c:	0e 94 51 00 	call	0xa2	; 0xa2 <setPort>
 140:	c2 cf       	rjmp	.-124    	; 0xc6 <main+0x14>
			//_delay_ms(150);
		}
		else if(data == 'D'){ // right
 142:	84 34       	cpi	r24, 0x44	; 68
 144:	91 05       	cpc	r25, r1
 146:	59 f4       	brne	.+22     	; 0x15e <main+0xac>
			setSpeed(175, 175);
 148:	6f ea       	ldi	r22, 0xAF	; 175
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	8f ea       	ldi	r24, 0xAF	; 175
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 54 00 	call	0xa8	; 0xa8 <setSpeed>
			setPort(0x18, 0x18);
 154:	68 e1       	ldi	r22, 0x18	; 24
 156:	88 e1       	ldi	r24, 0x18	; 24
 158:	0e 94 51 00 	call	0xa2	; 0xa2 <setPort>
 15c:	b4 cf       	rjmp	.-152    	; 0xc6 <main+0x14>
			//_delay_ms(150);
		}
		else if(data == 'S'){
 15e:	83 35       	cpi	r24, 0x53	; 83
 160:	91 05       	cpc	r25, r1
 162:	09 f0       	breq	.+2      	; 0x166 <main+0xb4>
 164:	b0 cf       	rjmp	.-160    	; 0xc6 <main+0x14>
			setSpeed(0, 0);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 54 00 	call	0xa8	; 0xa8 <setSpeed>
			setPort(0x00, 0x00);
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 51 00 	call	0xa2	; 0xa2 <setPort>
 17a:	a5 cf       	rjmp	.-182    	; 0xc6 <main+0x14>

0000017c <UART_1_init>:
 17c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 180:	80 e1       	ldi	r24, 0x10	; 16
 182:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 186:	e0 ec       	ldi	r30, 0xC0	; 192
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	80 83       	st	Z, r24
 190:	e2 ec       	ldi	r30, 0xC2	; 194
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	86 60       	ori	r24, 0x06	; 6
 198:	80 83       	st	Z, r24
 19a:	e1 ec       	ldi	r30, 0xC1	; 193
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	80 83       	st	Z, r24
 1a4:	80 81       	ld	r24, Z
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	80 83       	st	Z, r24
 1aa:	08 95       	ret

000001ac <UART1_receive>:
 1ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1b0:	88 23       	and	r24, r24
 1b2:	e4 f7       	brge	.-8      	; 0x1ac <UART1_receive>
 1b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
