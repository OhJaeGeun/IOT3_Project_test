
motor_driver_module_Lane.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000848  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000731  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043c  00000000  00000000  00001241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	char motor_right = 0x00;
	
	int cnt = 0;
	int data;
	
	DDRB = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A |= (1 << WGM11) | (1 << WGM10);
  84:	e0 e8       	ldi	r30, 0x80	; 128
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1);
  8e:	80 81       	ld	r24, Z
  90:	80 62       	ori	r24, 0x20	; 32
  92:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS12);
  94:	e1 e8       	ldi	r30, 0x81	; 129
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	80 83       	st	Z, r24
	
	TCCR2A |= (1 << WGM21) | (1 << WGM20);
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	83 60       	ori	r24, 0x03	; 3
  a6:	80 83       	st	Z, r24
	TCCR2A |= (1 << COM2A1);
  a8:	80 81       	ld	r24, Z
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);
  ae:	e1 eb       	ldi	r30, 0xB1	; 177
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	80 83       	st	Z, r24
	
	PORTB = 0x00;
  b8:	15 b8       	out	0x05, r1	; 5
	
	//OCR1B = 10;
	//OCR2A = 10;
	
	UART_1_init(); // UART1 초기화
  ba:	0e 94 b8 00 	call	0x170	; 0x170 <UART_1_init>
int main(void)
{
	//char motor_left = 0x05;   // 0000 0'1'01
	//char motor_right = 0x28;  // 0010 '1'000
	char motor_left = 0x00;
	char motor_right = 0x00;
  be:	d0 e0       	ldi	r29, 0x00	; 0

int main(void)
{
	//char motor_left = 0x05;   // 0000 0'1'01
	//char motor_right = 0x28;  // 0010 '1'000
	char motor_left = 0x00;
  c0:	c0 e0       	ldi	r28, 0x00	; 0
	
	//_delay_ms(1000);
	
	while(1)
	{
		PORTB = motor_left | motor_right;
  c2:	8c 2f       	mov	r24, r28
  c4:	8d 2b       	or	r24, r29
  c6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	80 e7       	ldi	r24, 0x70	; 112
  cc:	92 e0       	ldi	r25, 0x02	; 2
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
		_delay_ms(50);
		PORTB = 0x00;
  da:	15 b8       	out	0x05, r1	; 5
		data = UART1_receive();
  dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <UART1_receive>
  e0:	90 e0       	ldi	r25, 0x00	; 0
		
		if(data == 'A'){ // up
  e2:	81 34       	cpi	r24, 0x41	; 65
  e4:	91 05       	cpc	r25, r1
  e6:	61 f4       	brne	.+24     	; 0x100 <main+0x80>
			OCR1B = 200;
  e8:	88 ec       	ldi	r24, 0xC8	; 200
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  f0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 200;  
  f4:	88 ec       	ldi	r24, 0xC8	; 200
  f6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			motor_left = 0x05;  // 0000 0'1'01
			motor_right = 0x18; // 0001 '1'000
  fa:	d8 e1       	ldi	r29, 0x18	; 24
		
		if(data == 'A'){ // up
			OCR1B = 200;
			OCR2A = 200;  
			
			motor_left = 0x05;  // 0000 0'1'01
  fc:	c5 e0       	ldi	r28, 0x05	; 5
  fe:	e1 cf       	rjmp	.-62     	; 0xc2 <main+0x42>
			motor_right = 0x18; // 0001 '1'000
		}
		else if(data == 'B'){ // down
 100:	82 34       	cpi	r24, 0x42	; 66
 102:	91 05       	cpc	r25, r1
 104:	61 f4       	brne	.+24     	; 0x11e <main+0x9e>
			OCR1B = 150;
 106:	86 e9       	ldi	r24, 0x96	; 150
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 10e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 150;
 112:	86 e9       	ldi	r24, 0x96	; 150
 114:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			motor_left = 0x06;  // 0000 0'1'10
			motor_right = 0x28; // 0010 '1'000
 118:	d8 e2       	ldi	r29, 0x28	; 40
		}
		else if(data == 'B'){ // down
			OCR1B = 150;
			OCR2A = 150;
			
			motor_left = 0x06;  // 0000 0'1'10
 11a:	c6 e0       	ldi	r28, 0x06	; 6
 11c:	d2 cf       	rjmp	.-92     	; 0xc2 <main+0x42>
			motor_right = 0x28; // 0010 '1'000
		}
		else if(data == 'C'){ // left
 11e:	83 34       	cpi	r24, 0x43	; 67
 120:	91 05       	cpc	r25, r1
 122:	59 f4       	brne	.+22     	; 0x13a <main+0xba>
			OCR1B = 100;
 124:	84 e6       	ldi	r24, 0x64	; 100
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 12c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 100;
 130:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			motor_left = 0x06;
			motor_right = 0x18;
 134:	d8 e1       	ldi	r29, 0x18	; 24
			motor_right = 0x28; // 0010 '1'000
		}
		else if(data == 'C'){ // left
			OCR1B = 100;
			OCR2A = 100;
			motor_left = 0x06;
 136:	c6 e0       	ldi	r28, 0x06	; 6
 138:	c4 cf       	rjmp	.-120    	; 0xc2 <main+0x42>
			motor_right = 0x18;
		}
		else if(data == 'D'){ // right
 13a:	84 34       	cpi	r24, 0x44	; 68
 13c:	91 05       	cpc	r25, r1
 13e:	59 f4       	brne	.+22     	; 0x156 <main+0xd6>
			OCR1B = 100;
 140:	84 e6       	ldi	r24, 0x64	; 100
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 148:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 100;
 14c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			motor_left = 0x05;
			motor_right = 0x28;
 150:	d8 e2       	ldi	r29, 0x28	; 40
			motor_right = 0x18;
		}
		else if(data == 'D'){ // right
			OCR1B = 100;
			OCR2A = 100;
			motor_left = 0x05;
 152:	c5 e0       	ldi	r28, 0x05	; 5
 154:	b6 cf       	rjmp	.-148    	; 0xc2 <main+0x42>
			motor_right = 0x28;
		}
		else if(data == 'S'){
 156:	83 35       	cpi	r24, 0x53	; 83
 158:	91 05       	cpc	r25, r1
 15a:	09 f0       	breq	.+2      	; 0x15e <main+0xde>
 15c:	b2 cf       	rjmp	.-156    	; 0xc2 <main+0x42>
			OCR1B = 0;
 15e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 162:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			OCR2A = 0;
 166:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			motor_left = 0x00;
			motor_right = 0x00;
 16a:	d0 e0       	ldi	r29, 0x00	; 0
			motor_right = 0x28;
		}
		else if(data == 'S'){
			OCR1B = 0;
			OCR2A = 0;
			motor_left = 0x00;
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	a9 cf       	rjmp	.-174    	; 0xc2 <main+0x42>

00000170 <UART_1_init>:
void UART1_transmit(char data)
{
	// 송신 가능 대기
	while(!(UCSR0A & (1 << UDRE0)));
	// 데이터 전송
	UDR0 = data;
 170:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	82 60       	ori	r24, 0x02	; 2
 182:	80 83       	st	Z, r24
 184:	e2 ec       	ldi	r30, 0xC2	; 194
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	86 60       	ori	r24, 0x06	; 6
 18c:	80 83       	st	Z, r24
 18e:	e1 ec       	ldi	r30, 0xC1	; 193
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	80 61       	ori	r24, 0x10	; 16
 196:	80 83       	st	Z, r24
 198:	80 81       	ld	r24, Z
 19a:	88 60       	ori	r24, 0x08	; 8
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <UART1_receive>:
}

unsigned char UART1_receive(void)
{
	// Receive Complete 플래그 확인
	while(!(UCSR0A & (1 << RXC0)));
 1a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a4:	88 23       	and	r24, r24
 1a6:	e4 f7       	brge	.-8      	; 0x1a0 <UART1_receive>
	// Data Register 값 반환
	return UDR0;
 1a8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
